set nocompatible
set encoding=utf-8
set mouse=a

" -------------------------------------------------------------- Keybind Remappings
" Getting out of modes
inoremap kj <esc>
vnoremap kj <esc>

" Navigating splits
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l

" -------------------------------------------------------------- Styling
if exists('$TERM') && $TERM =~? 'truecolor'
    set termguicolors
else
    set notermguicolors
endif

colorscheme catppuccin_mocha

syntax on
set showmatch
set number
set relativenumber
set cursorline
set scrolloff=8
set nowrap

set showtabline=1
set laststatus=2
set signcolumn=yes

" -------------------------------------------------------------- Indenting
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smartindent
set autoindent

" -------------------------------------------------------------- Searching
set incsearch
set hlsearch
set ignorecase
set smartcase

" File Searching
set wildmenu
set wildignore+=**/.git/**,**/venv/**,**/vendor/**,**/__pycache__/**
set path+=**
nnoremap <leader>f :find 

" Grep searching within CWD
function! GrepFromCwd()
    let l:search = input('Grep for: ')
    if empty(l:search)
        echo "Search cancelled"
        return
    endif

    let l:cmd = join([
        \ "grep",
        \ "-rnI",
        \ "--exclude-dir=.git",
        \ "--exclude-dir=vendor",
        \ "--exclude-dir=__pycache__",
        \ "--exclude='*.swp'",
        \ shellescape(l:search),
        \ "."
    \ ], " ")

    let l:output = systemlist(l:cmd)

    if v:shell_error != 0
        redraw
        echohl WarningMsg | echom 'No matches found.' | echohl None
        return
    endif

    set grepformat=%f:%l:%m

    call setqflist([], 'r', {'lines': l:output, 'title': 'Grep results'})

    copen
endfunction

nnoremap <leader>g :call GrepFromCwd()<CR>
autocmd FileType qf nnoremap <buffer> <CR> <CR>zz:cclose<CR>

" -------------------------------------------------------------- Completion (Ctrl + N)
filetype plugin on
set completeopt=menu,menuone,noselect

" -------------------------------------------------------------- Code Folding (za)
set foldmethod=indent
set foldlevel=99

" -------------------------------------------------------------- Netrw Config
let g:netrw_liststyle=3 " Tree View
let g:netrw_preview=1 " Open previews in vertical split
let g:netrw_alto=0 " Open preview in vertical split
let g:netrw_altv=1 " Open vertical splits to right of current buffer
let g:netrw_keepdir=1 " Use vim CWD
let g:netrw_fastbrowse=0 " Always obtain fresh directory listings

nnoremap <Leader>e :Explore .<CR>

" -------------------------------------------------------------- Status line
function! ModeMap()
    let l:mode_map = {
        \ 'n'  : ['NORMAL', 'DiffText'],
        \ 'i'  : ['INSERT', 'DiffAdd'],
        \ 'v'  : ['VISUAL', 'DiffChange'],
        \ 'V'  : ['V-LINE', 'DiffChange'],
        \ "\<C-v>": ['V-BLOCK', 'DiffChange'],
        \ 'c'  : ['COMMAND', 'StatusLine'],
        \ }

    let l:mode = mode()
    return get(l:mode_map, l:mode, [l:mode, 'StatusLine'])
endfunction

function! BuildStatusLine()
    let l:mode_info = ModeMap()

    let s = ''
    let s .= '%#' . l:mode_info[1] . '# ' . l:mode_info[0] . ' '

    let l:branch = GetGitBranch()
    if l:branch != ''
        let s .= '%#StatusLine2#'
        let s .= ' âŽ‡  ' . substitute(l:branch, '\n', '', '')
        let s .= ' +' . g:num_added_lines . ' -' . g:num_removed_lines . ' ~' . g:num_modified_lines . ' '
    endif

    let s .= '%#StatusLine#'
    let s .= ' %F%m%=%{&filetype} '

    let s .= '%#StatusLine2#'
    let s .= ' %{&fileencoding?&fileencoding:&encoding} '

    let s .= '%#' . l:mode_info[1] . '#'
    let s .= ' In: %l/%L (%c) '

    return s
endfunction

let &statusline = "%!BuildStatusLine()"

" -------------------------------------------------------------- Pull in other vim files
source ~/.vim/git_magic.vim

