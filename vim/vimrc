set nocompatible
set encoding=utf-8
set mouse=a

if exists('$TERM') && $TERM =~? 'truecolor'
    set termguicolors
else
    set notermguicolors
endif

colorscheme catppuccin_mocha

set showtabline=1 " Default. Only show tabline when there is more than one tab
set laststatus=2
set signcolumn=yes

" Styling
syntax on
set showmatch
set number
set relativenumber
set cursorline
set scrolloff=8
set nowrap

" Indenting
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smartindent
set autoindent

" Searching
set incsearch
set hlsearch
set ignorecase
set smartcase

" Completion
filetype plugin on
set completeopt=menu,menuone,noselect

" Code folding
set foldmethod=indent
set foldlevel=99

" Change keybinding for getting out of modes 
inoremap kj <esc>
vnoremap kj <esc>

" Change keybindings for navigating splits
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l

" Netrw configs
let g:netrw_liststyle=3 " Tree View
let g:netrw_preview=1 " Open previews in vertical split
let g:netrw_alto=0 " Open preview in vertical split
let g:netrw_altv=1 " Open vertical splits to right of current buffer
let g:netrw_keepdir=1 " Use vim CWD
let g:netrw_fastbrowse=0 " Always obtain fresh directory listings

nnoremap <Leader>e :Explore .<CR>

" Searching system for files 
set wildmenu
set wildignore+=**/.git/**,**/venv/**,**/vendor/**,**/__pycache__/**
set path+=**
nnoremap <leader>f :find 

" Minimal fuzzy finding in source code
function! SearchAllFiles(query)
    if empty(a:query)
        echo "No search query provided."
        return
    endif

    execute 'vimgrep /' . escape(a:query, '/\') . '/j **/*'

    if len(getqflist()) > 0
        copen
    else
        echo "No matches found for: " . a:query
    endif
endfunction

nnoremap <leader>g :call SearchAllFiles(input('Search for: '))<CR>
autocmd FileType qf nnoremap <buffer> <CR> <CR>zz:cclose<CR>

" -------------------------------------------------------------- Status line
function! ModeName()
    let l:mode_map = {
        \ 'n'  : 'NORMAL',
        \ 'v'  : 'VISUAL',
        \ 'V'  : 'V-LINE',
        \ "\<C-v>": 'V-BLOCK',
        \ 'i'  : 'INSERT',
        \ 'c'  : 'COMMAND',
        \ }

    return get(l:mode_map, mode(), mode())
endfunction

function! ModeHighlight()
    let l:highlight_map = {
        \ 'n'  : 'DiffText',
        \ 'i'  : 'DiffAdd',
        \ 'v'  : 'DiffChange',
        \ 'V'  : 'DiffChange',
        \ "\<C-v>" : 'DiffChange',
        \}
    return '%#' . get(l:highlight_map, mode(), 'StatusLine') . '#'
endfunction

function! BuildStatusLine()
    let s = ''
    let s .= ModeHighlight() . ' ' . ModeName() . ' '

    let l:branch = GetGitBranch()
    if l:branch != ''
        let s .= '%#StatusLine2#'
        let s .= ' âŽ‡  ' . substitute(l:branch, '\n', '', '')
        let s .= ' +' . g:num_added_lines . ' -' . g:num_removed_lines . ' ~' . g:num_modified_lines . ' '
    endif

    let s .= '%#StatusLine#'
    let s .= ' %F%m%=%{&filetype} '

    let s .= '%#StatusLine2#'
    let s .= ' %{&fileencoding?&fileencoding:&encoding} '

    let s .= ModeHighlight()
    let s .= ' In: %l/%L (%c) '

    return s
endfunction

let &statusline = "%!BuildStatusLine()"
" -------------------------------------------------------------- Status line

" Pull in my other vim files
source ~/.vim/git_magic.vim
